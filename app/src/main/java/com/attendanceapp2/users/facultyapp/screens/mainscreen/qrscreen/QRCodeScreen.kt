package com.attendanceapp2.users.facultyapp.screens.mainscreen.qrscreen

import android.graphics.Bitmap
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.QrCodeScanner
import androidx.compose.material3.Button
import androidx.compose.material3.Icon
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavHostController
import com.attendanceapp2.authentication.SignInViewModel
import com.attendanceapp2.users.facultyapp.viewmodel.QRGeneratorViewModel
import com.attendanceapp2.viewmodel.AppViewModelProvider
import kotlinx.coroutines.launch

@Composable
fun QRCode (
    navController: NavHostController,
    viewModel: QRGeneratorViewModel = viewModel(factory = AppViewModelProvider.Factory)
) {

    val coroutineScope = rememberCoroutineScope()
    var data by remember { mutableStateOf("") }
    var qrCodegenerated by remember { mutableStateOf<Bitmap?>(null) }

    Box(
        modifier = Modifier
            .fillMaxSize()
    ) {
        Column(
            horizontalAlignment = Alignment.CenterHorizontally,
            modifier = Modifier
                .fillMaxSize()
                .padding(horizontal = 24.dp, vertical = 75.dp)
        ) {

            Text(text = "QR Code Generator")

            if (qrCodegenerated != null) {
                Image(
                    bitmap = qrCodegenerated!!.asImageBitmap(),
                    contentDescription = "Generated QR Code",
                    modifier = Modifier.size(200.dp),
                    contentScale = ContentScale.Fit
                )
            } else {
                Icon(
                    imageVector = Icons.Default.QrCodeScanner,
                    contentDescription = "",
                    modifier = Modifier.size(200.dp)
                )
            }


            OutlinedTextField(
                value = data,
                onValueChange = { data = it },
                placeholder = {
                    Text(text = "Enter Data")
                },
                shape = RoundedCornerShape(20.dp),
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(16.dp)
            )

            Spacer(modifier = Modifier.height(16.dp))

            Button(
                onClick = {
                    coroutineScope.launch { qrCodegenerated = viewModel.qrCodeGenerator(data) }
                },
                shape = RoundedCornerShape(20.dp)
            ) {
                Text(text = "Convert", color = Color.White)
            }
        }
    }
}
